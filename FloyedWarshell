package gfg2;

public class floyedWarshell {

	final static int Inf = 99999, v = 4;

	void floyedwarshell(int graph[][]) {
		int dist[][] = new int[v][v];
		int i, j, k;
		for (i = 0; i < v; i++)
			for (j = 0; j < v; j++)
				dist[i][j] = graph[i][j];

		for (k = 0; k < v; k++) {
			for (i = 0; i < v; i++) {
				for (j = 0; j < v; j++) {
					if (dist[i][k] + dist[k][j] < dist[i][j])
						dist[i][j] = dist[i][k] + dist[k][j];

				}
			}
		}
		printsolution(dist);
	}

	void printsolution(int dist[][]) {
		System.out.println("shortest distance");
		for (int i = 0; i < v; i++) {
			for (int j = 0; j < v; j++) {
				if (dist[i][j] == Inf)
					System.out.print("Inf ");
				else
					System.out.print(dist[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {

		int graph[][] = { 
		{ 0, 5, Inf, 10},
		{ Inf, 0, 3, Inf }, 
		{ Inf, Inf , 0, 1 }, 
		{ Inf, Inf, Inf, 0} };
		floyedWarshell a = new floyedWarshell();

		a.floyedwarshell(graph);
	}

}
